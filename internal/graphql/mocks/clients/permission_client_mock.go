// Code generated by mockery v1.0.0. DO NOT EDIT.

package clients

import (
	context "context"

	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"

	jsonapi "github.com/dictyBase/go-genproto/dictybaseapis/api/jsonapi"

	mock "github.com/stretchr/testify/mock"

	user "github.com/dictyBase/go-genproto/dictybaseapis/user"
)

// PermissionServiceClient is an autogenerated mock type for the PermissionServiceClient type
type PermissionServiceClient struct {
	mock.Mock
}

// CreatePermission provides a mock function with given fields: ctx, in, opts
func (_m *PermissionServiceClient) CreatePermission(ctx context.Context, in *user.CreatePermissionRequest, opts ...grpc.CallOption) (*user.Permission, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *user.Permission
	if rf, ok := ret.Get(0).(func(context.Context, *user.CreatePermissionRequest, ...grpc.CallOption) *user.Permission); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.Permission)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *user.CreatePermissionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePermission provides a mock function with given fields: ctx, in, opts
func (_m *PermissionServiceClient) DeletePermission(ctx context.Context, in *jsonapi.DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *jsonapi.DeleteRequest, ...grpc.CallOption) *empty.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *jsonapi.DeleteRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPermission provides a mock function with given fields: ctx, in, opts
func (_m *PermissionServiceClient) GetPermission(ctx context.Context, in *jsonapi.GetRequestWithFields, opts ...grpc.CallOption) (*user.Permission, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *user.Permission
	if rf, ok := ret.Get(0).(func(context.Context, *jsonapi.GetRequestWithFields, ...grpc.CallOption) *user.Permission); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.Permission)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *jsonapi.GetRequestWithFields, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPermissions provides a mock function with given fields: ctx, in, opts
func (_m *PermissionServiceClient) ListPermissions(ctx context.Context, in *jsonapi.SimpleListRequest, opts ...grpc.CallOption) (*user.PermissionCollection, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *user.PermissionCollection
	if rf, ok := ret.Get(0).(func(context.Context, *jsonapi.SimpleListRequest, ...grpc.CallOption) *user.PermissionCollection); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.PermissionCollection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *jsonapi.SimpleListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePermission provides a mock function with given fields: ctx, in, opts
func (_m *PermissionServiceClient) UpdatePermission(ctx context.Context, in *user.UpdatePermissionRequest, opts ...grpc.CallOption) (*user.Permission, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *user.Permission
	if rf, ok := ret.Get(0).(func(context.Context, *user.UpdatePermissionRequest, ...grpc.CallOption) *user.Permission); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.Permission)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *user.UpdatePermissionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
