// Code generated by mockery v1.0.0. DO NOT EDIT.

package clients

import (
	context "context"

	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"

	identity "github.com/dictyBase/go-genproto/dictybaseapis/identity"

	jsonapi "github.com/dictyBase/go-genproto/dictybaseapis/api/jsonapi"

	mock "github.com/stretchr/testify/mock"
)

// IdentityServiceClient is an autogenerated mock type for the IdentityServiceClient type
type IdentityServiceClient struct {
	mock.Mock
}

// CreateIdentity provides a mock function with given fields: ctx, in, opts
func (_m *IdentityServiceClient) CreateIdentity(ctx context.Context, in *identity.CreateIdentityReq, opts ...grpc.CallOption) (*identity.Identity, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *identity.Identity
	if rf, ok := ret.Get(0).(func(context.Context, *identity.CreateIdentityReq, ...grpc.CallOption) *identity.Identity); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identity.Identity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *identity.CreateIdentityReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIdentity provides a mock function with given fields: ctx, in, opts
func (_m *IdentityServiceClient) DeleteIdentity(ctx context.Context, in *jsonapi.IdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *jsonapi.IdRequest, ...grpc.CallOption) *empty.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *jsonapi.IdRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExistProviderIdentity provides a mock function with given fields: ctx, in, opts
func (_m *IdentityServiceClient) ExistProviderIdentity(ctx context.Context, in *identity.IdentityProviderReq, opts ...grpc.CallOption) (*jsonapi.ExistResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *jsonapi.ExistResponse
	if rf, ok := ret.Get(0).(func(context.Context, *identity.IdentityProviderReq, ...grpc.CallOption) *jsonapi.ExistResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jsonapi.ExistResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *identity.IdentityProviderReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIdentity provides a mock function with given fields: ctx, in, opts
func (_m *IdentityServiceClient) GetIdentity(ctx context.Context, in *jsonapi.IdRequest, opts ...grpc.CallOption) (*identity.Identity, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *identity.Identity
	if rf, ok := ret.Get(0).(func(context.Context, *jsonapi.IdRequest, ...grpc.CallOption) *identity.Identity); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identity.Identity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *jsonapi.IdRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIdentityFromProvider provides a mock function with given fields: ctx, in, opts
func (_m *IdentityServiceClient) GetIdentityFromProvider(ctx context.Context, in *identity.IdentityProviderReq, opts ...grpc.CallOption) (*identity.Identity, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *identity.Identity
	if rf, ok := ret.Get(0).(func(context.Context, *identity.IdentityProviderReq, ...grpc.CallOption) *identity.Identity); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identity.Identity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *identity.IdentityProviderReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Healthz provides a mock function with given fields: ctx, in, opts
func (_m *IdentityServiceClient) Healthz(ctx context.Context, in *jsonapi.HealthzIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *jsonapi.HealthzIdRequest, ...grpc.CallOption) *empty.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *jsonapi.HealthzIdRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
