// Code generated by mockery v2.43.1. DO NOT EDIT.

package clients

import (
	context "context"

	content "github.com/dictyBase/go-genproto/dictybaseapis/content"

	emptypb "google.golang.org/protobuf/types/known/emptypb"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// ContentServiceClient is an autogenerated mock type for the ContentServiceClient type
type ContentServiceClient struct {
	mock.Mock
}

// DeleteContent provides a mock function with given fields: ctx, in, opts
func (_m *ContentServiceClient) DeleteContent(ctx context.Context, in *content.ContentIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteContent")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *content.ContentIdRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *content.ContentIdRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *content.ContentIdRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContent provides a mock function with given fields: ctx, in, opts
func (_m *ContentServiceClient) GetContent(ctx context.Context, in *content.ContentIdRequest, opts ...grpc.CallOption) (*content.Content, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetContent")
	}

	var r0 *content.Content
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *content.ContentIdRequest, ...grpc.CallOption) (*content.Content, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *content.ContentIdRequest, ...grpc.CallOption) *content.Content); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*content.Content)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *content.ContentIdRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContentBySlug provides a mock function with given fields: ctx, in, opts
func (_m *ContentServiceClient) GetContentBySlug(ctx context.Context, in *content.ContentRequest, opts ...grpc.CallOption) (*content.Content, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetContentBySlug")
	}

	var r0 *content.Content
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *content.ContentRequest, ...grpc.CallOption) (*content.Content, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *content.ContentRequest, ...grpc.CallOption) *content.Content); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*content.Content)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *content.ContentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListContents provides a mock function with given fields: ctx, in, opts
func (_m *ContentServiceClient) ListContents(ctx context.Context, in *content.ListParameters, opts ...grpc.CallOption) (*content.ContentCollection, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListContents")
	}

	var r0 *content.ContentCollection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *content.ListParameters, ...grpc.CallOption) (*content.ContentCollection, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *content.ListParameters, ...grpc.CallOption) *content.ContentCollection); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*content.ContentCollection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *content.ListParameters, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreContent provides a mock function with given fields: ctx, in, opts
func (_m *ContentServiceClient) StoreContent(ctx context.Context, in *content.StoreContentRequest, opts ...grpc.CallOption) (*content.Content, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StoreContent")
	}

	var r0 *content.Content
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *content.StoreContentRequest, ...grpc.CallOption) (*content.Content, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *content.StoreContentRequest, ...grpc.CallOption) *content.Content); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*content.Content)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *content.StoreContentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateContent provides a mock function with given fields: ctx, in, opts
func (_m *ContentServiceClient) UpdateContent(ctx context.Context, in *content.UpdateContentRequest, opts ...grpc.CallOption) (*content.Content, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContent")
	}

	var r0 *content.Content
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *content.UpdateContentRequest, ...grpc.CallOption) (*content.Content, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *content.UpdateContentRequest, ...grpc.CallOption) *content.Content); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*content.Content)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *content.UpdateContentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewContentServiceClient creates a new instance of ContentServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContentServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
},
) *ContentServiceClient {
	mock := &ContentServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
