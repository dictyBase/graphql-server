// Code generated by mockery v2.20.2. DO NOT EDIT.

package clients

import (
	authentication "github.com/dictyBase/graphql-server/internal/authentication"
	mock "github.com/stretchr/testify/mock"
)

// LogtoClient is an autogenerated mock type for the LogtoClient type
type LogtoClient struct {
	mock.Mock
}

// AccessToken provides a mock function with given fields:
func (_m *LogtoClient) AccessToken() (*authentication.AccessTokenResp, error) {
	ret := _m.Called()

	var r0 *authentication.AccessTokenResp
	var r1 error
	if rf, ok := ret.Get(0).(func() (*authentication.AccessTokenResp, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *authentication.AccessTokenResp); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authentication.AccessTokenResp)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddCustomUserInformation provides a mock function with given fields: _a0, _a1, _a2
func (_m *LogtoClient) AddCustomUserInformation(_a0 string, _a1 string, _a2 *authentication.APIUsersPatchCustomData) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, *authentication.APIUsersPatchCustomData) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckUser provides a mock function with given fields: _a0
func (_m *LogtoClient) CheckUser(_a0 string) (bool, string, error) {
	ret := _m.Called(_a0)

	var r0 bool
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (bool, string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CheckUserWithUserName provides a mock function with given fields: _a0
func (_m *LogtoClient) CheckUserWithUserName(_a0 string) (bool, string, error) {
	ret := _m.Called(_a0)

	var r0 bool
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (bool, string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateUser provides a mock function with given fields: _a0, _a1
func (_m *LogtoClient) CreateUser(_a0 string, _a1 *authentication.APIUsersPostReq) (string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *authentication.APIUsersPostReq) (string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, *authentication.APIUsersPostReq) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, *authentication.APIUsersPostReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Permissions provides a mock function with given fields: _a0
func (_m *LogtoClient) Permissions(_a0 string) ([]*authentication.PermissionResp, error) {
	ret := _m.Called(_a0)

	var r0 []*authentication.PermissionResp
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*authentication.PermissionResp, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []*authentication.PermissionResp); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*authentication.PermissionResp)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Roles provides a mock function with given fields: _a0
func (_m *LogtoClient) Roles(_a0 string) ([]*authentication.RoleResp, error) {
	ret := _m.Called(_a0)

	var r0 []*authentication.RoleResp
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*authentication.RoleResp, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []*authentication.RoleResp); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*authentication.RoleResp)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// User provides a mock function with given fields: _a0
func (_m *LogtoClient) User(_a0 string) (*authentication.UserResp, error) {
	ret := _m.Called(_a0)

	var r0 *authentication.UserResp
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*authentication.UserResp, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *authentication.UserResp); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authentication.UserResp)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserWithEmail provides a mock function with given fields: _a0
func (_m *LogtoClient) UserWithEmail(_a0 string) (*authentication.UserResp, error) {
	ret := _m.Called(_a0)

	var r0 *authentication.UserResp
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*authentication.UserResp, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *authentication.UserResp); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authentication.UserResp)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewLogtoClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewLogtoClient creates a new instance of LogtoClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLogtoClient(t mockConstructorTestingTNewLogtoClient) *LogtoClient {
	mock := &LogtoClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
