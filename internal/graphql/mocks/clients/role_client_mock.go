// Code generated by mockery v1.0.0. DO NOT EDIT.

package clients

import (
	context "context"

	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"

	jsonapi "github.com/dictyBase/go-genproto/dictybaseapis/api/jsonapi"

	mock "github.com/stretchr/testify/mock"

	user "github.com/dictyBase/go-genproto/dictybaseapis/user"
)

// RoleServiceClient is an autogenerated mock type for the RoleServiceClient type
type RoleServiceClient struct {
	mock.Mock
}

// CreatePermissionRelationship provides a mock function with given fields: ctx, in, opts
func (_m *RoleServiceClient) CreatePermissionRelationship(ctx context.Context, in *jsonapi.DataCollection, opts ...grpc.CallOption) (*empty.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *jsonapi.DataCollection, ...grpc.CallOption) *empty.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *jsonapi.DataCollection, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRole provides a mock function with given fields: ctx, in, opts
func (_m *RoleServiceClient) CreateRole(ctx context.Context, in *user.CreateRoleRequest, opts ...grpc.CallOption) (*user.Role, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *user.Role
	if rf, ok := ret.Get(0).(func(context.Context, *user.CreateRoleRequest, ...grpc.CallOption) *user.Role); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.Role)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *user.CreateRoleRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserRelationship provides a mock function with given fields: ctx, in, opts
func (_m *RoleServiceClient) CreateUserRelationship(ctx context.Context, in *jsonapi.DataCollection, opts ...grpc.CallOption) (*empty.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *jsonapi.DataCollection, ...grpc.CallOption) *empty.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *jsonapi.DataCollection, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePermissionRelationship provides a mock function with given fields: ctx, in, opts
func (_m *RoleServiceClient) DeletePermissionRelationship(ctx context.Context, in *jsonapi.DataCollection, opts ...grpc.CallOption) (*empty.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *jsonapi.DataCollection, ...grpc.CallOption) *empty.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *jsonapi.DataCollection, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRole provides a mock function with given fields: ctx, in, opts
func (_m *RoleServiceClient) DeleteRole(ctx context.Context, in *jsonapi.DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *jsonapi.DeleteRequest, ...grpc.CallOption) *empty.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *jsonapi.DeleteRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserRelationship provides a mock function with given fields: ctx, in, opts
func (_m *RoleServiceClient) DeleteUserRelationship(ctx context.Context, in *jsonapi.DataCollection, opts ...grpc.CallOption) (*empty.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *jsonapi.DataCollection, ...grpc.CallOption) *empty.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *jsonapi.DataCollection, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelatedPermissions provides a mock function with given fields: ctx, in, opts
func (_m *RoleServiceClient) GetRelatedPermissions(ctx context.Context, in *jsonapi.RelationshipRequest, opts ...grpc.CallOption) (*user.PermissionCollection, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *user.PermissionCollection
	if rf, ok := ret.Get(0).(func(context.Context, *jsonapi.RelationshipRequest, ...grpc.CallOption) *user.PermissionCollection); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.PermissionCollection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *jsonapi.RelationshipRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelatedUsers provides a mock function with given fields: ctx, in, opts
func (_m *RoleServiceClient) GetRelatedUsers(ctx context.Context, in *jsonapi.RelationshipRequestWithPagination, opts ...grpc.CallOption) (*user.UserCollection, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *user.UserCollection
	if rf, ok := ret.Get(0).(func(context.Context, *jsonapi.RelationshipRequestWithPagination, ...grpc.CallOption) *user.UserCollection); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.UserCollection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *jsonapi.RelationshipRequestWithPagination, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRole provides a mock function with given fields: ctx, in, opts
func (_m *RoleServiceClient) GetRole(ctx context.Context, in *jsonapi.GetRequest, opts ...grpc.CallOption) (*user.Role, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *user.Role
	if rf, ok := ret.Get(0).(func(context.Context, *jsonapi.GetRequest, ...grpc.CallOption) *user.Role); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.Role)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *jsonapi.GetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRoles provides a mock function with given fields: ctx, in, opts
func (_m *RoleServiceClient) ListRoles(ctx context.Context, in *jsonapi.SimpleListRequest, opts ...grpc.CallOption) (*user.RoleCollection, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *user.RoleCollection
	if rf, ok := ret.Get(0).(func(context.Context, *jsonapi.SimpleListRequest, ...grpc.CallOption) *user.RoleCollection); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.RoleCollection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *jsonapi.SimpleListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePermissionRelationship provides a mock function with given fields: ctx, in, opts
func (_m *RoleServiceClient) UpdatePermissionRelationship(ctx context.Context, in *jsonapi.DataCollection, opts ...grpc.CallOption) (*empty.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *jsonapi.DataCollection, ...grpc.CallOption) *empty.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *jsonapi.DataCollection, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRole provides a mock function with given fields: ctx, in, opts
func (_m *RoleServiceClient) UpdateRole(ctx context.Context, in *user.UpdateRoleRequest, opts ...grpc.CallOption) (*user.Role, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *user.Role
	if rf, ok := ret.Get(0).(func(context.Context, *user.UpdateRoleRequest, ...grpc.CallOption) *user.Role); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.Role)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *user.UpdateRoleRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserRelationship provides a mock function with given fields: ctx, in, opts
func (_m *RoleServiceClient) UpdateUserRelationship(ctx context.Context, in *jsonapi.DataCollection, opts ...grpc.CallOption) (*empty.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *jsonapi.DataCollection, ...grpc.CallOption) *empty.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *jsonapi.DataCollection, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
