// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import auth "github.com/dictyBase/go-genproto/dictybaseapis/auth"
import context "context"
import empty "github.com/golang/protobuf/ptypes/empty"
import grpc "google.golang.org/grpc"
import mock "github.com/stretchr/testify/mock"

// AuthServiceClient is an autogenerated mock type for the AuthServiceClient type
type AuthServiceClient struct {
	mock.Mock
}

// GetRefreshToken provides a mock function with given fields: ctx, in, opts
func (_m *AuthServiceClient) GetRefreshToken(ctx context.Context, in *auth.NewToken, opts ...grpc.CallOption) (*auth.Token, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *auth.Token
	if rf, ok := ret.Get(0).(func(context.Context, *auth.NewToken, ...grpc.CallOption) *auth.Token); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.NewToken, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, in, opts
func (_m *AuthServiceClient) Login(ctx context.Context, in *auth.NewLogin, opts ...grpc.CallOption) (*auth.Auth, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *auth.Auth
	if rf, ok := ret.Get(0).(func(context.Context, *auth.NewLogin, ...grpc.CallOption) *auth.Auth); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.Auth)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.NewLogin, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: ctx, in, opts
func (_m *AuthServiceClient) Logout(ctx context.Context, in *auth.NewRefreshToken, opts ...grpc.CallOption) (*empty.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *auth.NewRefreshToken, ...grpc.CallOption) *empty.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.NewRefreshToken, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Relogin provides a mock function with given fields: ctx, in, opts
func (_m *AuthServiceClient) Relogin(ctx context.Context, in *auth.NewRelogin, opts ...grpc.CallOption) (*auth.Auth, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *auth.Auth
	if rf, ok := ret.Get(0).(func(context.Context, *auth.NewRelogin, ...grpc.CallOption) *auth.Auth); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.Auth)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.NewRelogin, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
