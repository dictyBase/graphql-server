// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import content "github.com/dictyBase/go-genproto/dictybaseapis/content"
import context "context"
import empty "github.com/golang/protobuf/ptypes/empty"
import grpc "google.golang.org/grpc"
import jsonapi "github.com/dictyBase/go-genproto/dictybaseapis/api/jsonapi"
import mock "github.com/stretchr/testify/mock"

// ContentServiceClient is an autogenerated mock type for the ContentServiceClient type
type ContentServiceClient struct {
	mock.Mock
}

// DeleteContent provides a mock function with given fields: ctx, in, opts
func (_m *ContentServiceClient) DeleteContent(ctx context.Context, in *content.ContentIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *content.ContentIdRequest, ...grpc.CallOption) *empty.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *content.ContentIdRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContent provides a mock function with given fields: ctx, in, opts
func (_m *ContentServiceClient) GetContent(ctx context.Context, in *content.ContentIdRequest, opts ...grpc.CallOption) (*content.Content, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *content.Content
	if rf, ok := ret.Get(0).(func(context.Context, *content.ContentIdRequest, ...grpc.CallOption) *content.Content); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*content.Content)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *content.ContentIdRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContentBySlug provides a mock function with given fields: ctx, in, opts
func (_m *ContentServiceClient) GetContentBySlug(ctx context.Context, in *content.ContentRequest, opts ...grpc.CallOption) (*content.Content, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *content.Content
	if rf, ok := ret.Get(0).(func(context.Context, *content.ContentRequest, ...grpc.CallOption) *content.Content); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*content.Content)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *content.ContentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Healthz provides a mock function with given fields: ctx, in, opts
func (_m *ContentServiceClient) Healthz(ctx context.Context, in *jsonapi.HealthzIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *jsonapi.HealthzIdRequest, ...grpc.CallOption) *empty.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *jsonapi.HealthzIdRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreContent provides a mock function with given fields: ctx, in, opts
func (_m *ContentServiceClient) StoreContent(ctx context.Context, in *content.StoreContentRequest, opts ...grpc.CallOption) (*content.Content, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *content.Content
	if rf, ok := ret.Get(0).(func(context.Context, *content.StoreContentRequest, ...grpc.CallOption) *content.Content); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*content.Content)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *content.StoreContentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateContent provides a mock function with given fields: ctx, in, opts
func (_m *ContentServiceClient) UpdateContent(ctx context.Context, in *content.UpdateContentRequest, opts ...grpc.CallOption) (*content.Content, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *content.Content
	if rf, ok := ret.Get(0).(func(context.Context, *content.UpdateContentRequest, ...grpc.CallOption) *content.Content); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*content.Content)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *content.UpdateContentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
