// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/dictyBase/go-genproto/dictybaseapis/order"
	"github.com/dictyBase/go-genproto/dictybaseapis/publication"
	"github.com/dictyBase/go-genproto/dictybaseapis/user"
)

type BasePublication interface {
	IsBasePublication()
}

type Stock interface {
	IsStock()
}

type Citation struct {
	Authors  string `json:"authors"`
	Title    string `json:"title"`
	Journal  string `json:"journal"`
	PubmedID string `json:"pubmed_id"`
}

type CreateContentInput struct {
	Name      string `json:"name"`
	CreatedBy string `json:"created_by"`
	Content   string `json:"content"`
	Namespace string `json:"namespace"`
}

type CreateOrderInput struct {
	Courier          string     `json:"courier"`
	CourierAccount   string     `json:"courier_account"`
	Comments         *string    `json:"comments,omitempty"`
	Payment          string     `json:"payment"`
	PurchaseOrderNum *string    `json:"purchase_order_num,omitempty"`
	Status           StatusEnum `json:"status"`
	Consumer         string     `json:"consumer"`
	Payer            string     `json:"payer"`
	Purchaser        string     `json:"purchaser"`
	Items            []string   `json:"items"`
}

type CreatePermissionInput struct {
	Permission  string `json:"permission"`
	Description string `json:"description"`
	Resource    string `json:"resource"`
}

type CreatePlasmidInput struct {
	CreatedBy        string   `json:"created_by"`
	UpdatedBy        string   `json:"updated_by"`
	Summary          *string  `json:"summary,omitempty"`
	EditableSummary  *string  `json:"editable_summary,omitempty"`
	Depositor        *string  `json:"depositor,omitempty"`
	Genes            []string `json:"genes,omitempty"`
	Dbxrefs          []string `json:"dbxrefs,omitempty"`
	Publications     []string `json:"publications,omitempty"`
	Name             string   `json:"name"`
	ImageMap         *string  `json:"image_map,omitempty"`
	Sequence         *string  `json:"sequence,omitempty"`
	InStock          bool     `json:"in_stock"`
	Keywords         []string `json:"keywords,omitempty"`
	GenbankAccession *string  `json:"genbank_accession,omitempty"`
}

type CreateRoleInput struct {
	Role        string `json:"role"`
	Description string `json:"description"`
}

type CreateStrainInput struct {
	CreatedBy           string   `json:"created_by"`
	UpdatedBy           string   `json:"updated_by"`
	Summary             *string  `json:"summary,omitempty"`
	EditableSummary     *string  `json:"editable_summary,omitempty"`
	Depositor           *string  `json:"depositor,omitempty"`
	Genes               []string `json:"genes,omitempty"`
	Dbxrefs             []string `json:"dbxrefs,omitempty"`
	Publications        []string `json:"publications,omitempty"`
	SystematicName      string   `json:"systematic_name"`
	Label               string   `json:"label"`
	Species             string   `json:"species"`
	Plasmid             *string  `json:"plasmid,omitempty"`
	Parent              *string  `json:"parent,omitempty"`
	Names               []string `json:"names,omitempty"`
	InStock             bool     `json:"in_stock"`
	Phenotypes          []string `json:"phenotypes,omitempty"`
	GeneticModification *string  `json:"genetic_modification,omitempty"`
	MutagenesisMethod   *string  `json:"mutagenesis_method,omitempty"`
	Characteristics     []string `json:"characteristics,omitempty"`
	Genotypes           []string `json:"genotypes,omitempty"`
}

type CreateUserInput struct {
	FirstName     string  `json:"first_name"`
	LastName      string  `json:"last_name"`
	Email         string  `json:"email"`
	Organization  *string `json:"organization,omitempty"`
	GroupName     *string `json:"group_name,omitempty"`
	FirstAddress  *string `json:"first_address,omitempty"`
	SecondAddress *string `json:"second_address,omitempty"`
	City          *string `json:"city,omitempty"`
	State         *string `json:"state,omitempty"`
	Zipcode       *string `json:"zipcode,omitempty"`
	Country       *string `json:"country,omitempty"`
	Phone         *string `json:"phone,omitempty"`
	IsActive      bool    `json:"is_active"`
}

type DeleteContent struct {
	Success bool `json:"success"`
}

type DeletePermission struct {
	Success bool `json:"success"`
}

type DeleteRole struct {
	Success bool `json:"success"`
}

type DeleteStock struct {
	Success bool `json:"success"`
}

type DeleteUser struct {
	Success bool `json:"success"`
}

type Download struct {
	Title string          `json:"title"`
	Items []*DownloadItem `json:"items"`
}

type DownloadItem struct {
	Title string `json:"title"`
	URL   string `json:"url"`
}

type Extension struct {
	ID       string `json:"id"`
	Db       string `json:"db"`
	Relation string `json:"relation"`
	Name     string `json:"name"`
}

// The `UploadFile` type, represents the request for uploading a image file with a certain payload.
type FileToUpload struct {
	ID   int            `json:"id"`
	File graphql.Upload `json:"file"`
}

type GOAnnotation struct {
	ID           string       `json:"id"`
	Type         string       `json:"type"`
	Date         string       `json:"date"`
	EvidenceCode string       `json:"evidence_code"`
	GoTerm       string       `json:"go_term"`
	Qualifier    string       `json:"qualifier"`
	Publication  string       `json:"publication"`
	With         []*With      `json:"with,omitempty"`
	Extensions   []*Extension `json:"extensions,omitempty"`
	AssignedBy   string       `json:"assigned_by"`
}

type Gene struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type GeneGeneralInfo struct {
	ID              string    `json:"id"`
	NameDescription []*string `json:"name_description"`
	GeneProduct     *string   `json:"gene_product,omitempty"`
	Synonyms        []*string `json:"synonyms"`
	Description     *string   `json:"description,omitempty"`
}

type Identity struct {
	ID         string    `json:"id"`
	Identifier string    `json:"identifier"`
	Provider   string    `json:"provider"`
	UserID     string    `json:"user_id"`
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
}

// The `ImageFile` type, represents the response of uploading an image file.
type ImageFile struct {
	URL string `json:"url"`
}

type LoginInput struct {
	ClientID    string `json:"client_id"`
	State       string `json:"state"`
	Code        string `json:"code"`
	Scopes      string `json:"scopes"`
	Provider    string `json:"provider"`
	RedirectURL string `json:"redirect_url"`
}

type Logout struct {
	Success bool `json:"success"`
}

type NumberOfPublicationsWithGene struct {
	NumPubs      int                    `json:"num_pubs"`
	Publications []*PublicationWithGene `json:"publications"`
}

type OrderListWithCursor struct {
	Orders         []*order.Order `json:"orders"`
	NextCursor     int            `json:"nextCursor"`
	PreviousCursor int            `json:"previousCursor"`
	Limit          *int           `json:"limit,omitempty"`
	TotalCount     int            `json:"totalCount"`
}

type Organism struct {
	TaxonID        string      `json:"taxon_id"`
	ScientificName string      `json:"scientific_name"`
	Citations      []*Citation `json:"citations"`
	Downloads      []*Download `json:"downloads"`
}

type Phenotype struct {
	Phenotype   string       `json:"phenotype"`
	Note        *string      `json:"note,omitempty"`
	Assay       *string      `json:"assay,omitempty"`
	Environment *string      `json:"environment,omitempty"`
	Publication *Publication `json:"publication,omitempty"`
}

type PlasmidListWithCursor struct {
	Plasmids       []*Plasmid `json:"plasmids"`
	NextCursor     int        `json:"nextCursor"`
	PreviousCursor int        `json:"previousCursor"`
	Limit          *int       `json:"limit,omitempty"`
	TotalCount     int        `json:"totalCount"`
}

type Publication struct {
	ID       string                `json:"id"`
	Doi      *string               `json:"doi,omitempty"`
	Title    string                `json:"title"`
	Abstract string                `json:"abstract"`
	Journal  string                `json:"journal"`
	PubDate  *time.Time            `json:"pub_date,omitempty"`
	Volume   *string               `json:"volume,omitempty"`
	Pages    *string               `json:"pages,omitempty"`
	Issn     *string               `json:"issn,omitempty"`
	PubType  string                `json:"pub_type"`
	Source   string                `json:"source"`
	Issue    *string               `json:"issue,omitempty"`
	Status   *string               `json:"status,omitempty"`
	Authors  []*publication.Author `json:"authors"`
}

func (Publication) IsBasePublication() {}

type PublicationWithGene struct {
	RelatedGenes []*Gene               `json:"related_genes"`
	ID           string                `json:"id"`
	Doi          *string               `json:"doi,omitempty"`
	Title        string                `json:"title"`
	Abstract     string                `json:"abstract"`
	Journal      string                `json:"journal"`
	PubDate      *time.Time            `json:"pub_date,omitempty"`
	Volume       *string               `json:"volume,omitempty"`
	Pages        *string               `json:"pages,omitempty"`
	Issn         *string               `json:"issn,omitempty"`
	PubType      string                `json:"pub_type"`
	Source       string                `json:"source"`
	Issue        *string               `json:"issue,omitempty"`
	Status       *string               `json:"status,omitempty"`
	Authors      []*publication.Author `json:"authors"`
}

func (PublicationWithGene) IsBasePublication() {}

type StrainListFilter struct {
	Label      *string    `json:"label,omitempty"`
	Summary    *string    `json:"summary,omitempty"`
	ID         *string    `json:"id,omitempty"`
	InStock    *bool      `json:"in_stock,omitempty"`
	StrainType StrainType `json:"strain_type"`
}

type StrainListWithCursor struct {
	Strains        []*Strain `json:"strains"`
	NextCursor     int       `json:"nextCursor"`
	PreviousCursor int       `json:"previousCursor"`
	Limit          *int      `json:"limit,omitempty"`
	TotalCount     int       `json:"totalCount"`
}

type UpdateContentInput struct {
	ID        string `json:"id"`
	UpdatedBy string `json:"updated_by"`
	Content   string `json:"content"`
}

type UpdateOrderInput struct {
	Courier          *string     `json:"courier,omitempty"`
	CourierAccount   *string     `json:"courier_account,omitempty"`
	Comments         *string     `json:"comments,omitempty"`
	Payment          *string     `json:"payment,omitempty"`
	PurchaseOrderNum *string     `json:"purchase_order_num,omitempty"`
	Status           *StatusEnum `json:"status,omitempty"`
	Items            []string    `json:"items,omitempty"`
}

type UpdatePermissionInput struct {
	Permission  string `json:"permission"`
	Description string `json:"description"`
	Resource    string `json:"resource"`
}

type UpdatePlasmidInput struct {
	UpdatedBy        string   `json:"updated_by"`
	Summary          *string  `json:"summary,omitempty"`
	EditableSummary  *string  `json:"editable_summary,omitempty"`
	Depositor        *string  `json:"depositor,omitempty"`
	Genes            []string `json:"genes,omitempty"`
	Dbxrefs          []string `json:"dbxrefs,omitempty"`
	Publications     []string `json:"publications,omitempty"`
	Name             *string  `json:"name,omitempty"`
	ImageMap         *string  `json:"image_map,omitempty"`
	Sequence         *string  `json:"sequence,omitempty"`
	InStock          *bool    `json:"in_stock,omitempty"`
	Keywords         []string `json:"keywords,omitempty"`
	GenbankAccession *string  `json:"genbank_accession,omitempty"`
}

type UpdateRoleInput struct {
	Role        string `json:"role"`
	Description string `json:"description"`
}

type UpdateStrainInput struct {
	UpdatedBy           string   `json:"updated_by"`
	Summary             *string  `json:"summary,omitempty"`
	EditableSummary     *string  `json:"editable_summary,omitempty"`
	Depositor           *string  `json:"depositor,omitempty"`
	Genes               []string `json:"genes,omitempty"`
	Dbxrefs             []string `json:"dbxrefs,omitempty"`
	Publications        []string `json:"publications,omitempty"`
	SystematicName      *string  `json:"systematic_name,omitempty"`
	Label               *string  `json:"label,omitempty"`
	Species             *string  `json:"species,omitempty"`
	Plasmid             *string  `json:"plasmid,omitempty"`
	Parent              *string  `json:"parent,omitempty"`
	Names               []string `json:"names,omitempty"`
	InStock             *bool    `json:"in_stock,omitempty"`
	Phenotypes          []string `json:"phenotypes,omitempty"`
	GeneticModification *string  `json:"genetic_modification,omitempty"`
	MutagenesisMethod   *string  `json:"mutagenesis_method,omitempty"`
	Characteristics     []string `json:"characteristics,omitempty"`
	Genotypes           []string `json:"genotypes,omitempty"`
}

type UpdateUserInput struct {
	FirstName     *string `json:"first_name,omitempty"`
	LastName      *string `json:"last_name,omitempty"`
	Organization  *string `json:"organization,omitempty"`
	GroupName     *string `json:"group_name,omitempty"`
	FirstAddress  *string `json:"first_address,omitempty"`
	SecondAddress *string `json:"second_address,omitempty"`
	City          *string `json:"city,omitempty"`
	State         *string `json:"state,omitempty"`
	Zipcode       *string `json:"zipcode,omitempty"`
	Country       *string `json:"country,omitempty"`
	Phone         *string `json:"phone,omitempty"`
	IsActive      *bool   `json:"is_active,omitempty"`
}

type UserList struct {
	Users      []*user.User `json:"users"`
	PageNum    *string      `json:"pageNum,omitempty"`
	PageSize   *string      `json:"pageSize,omitempty"`
	TotalCount int          `json:"totalCount"`
}

type With struct {
	ID   string `json:"id"`
	Db   string `json:"db"`
	Name string `json:"name"`
}

type StatusEnum string

const (
	StatusEnumInPreparation StatusEnum = "IN_PREPARATION"
	StatusEnumGrowing       StatusEnum = "GROWING"
	StatusEnumCancelled     StatusEnum = "CANCELLED"
	StatusEnumShipped       StatusEnum = "SHIPPED"
)

var AllStatusEnum = []StatusEnum{
	StatusEnumInPreparation,
	StatusEnumGrowing,
	StatusEnumCancelled,
	StatusEnumShipped,
}

func (e StatusEnum) IsValid() bool {
	switch e {
	case StatusEnumInPreparation, StatusEnumGrowing, StatusEnumCancelled, StatusEnumShipped:
		return true
	}
	return false
}

func (e StatusEnum) String() string {
	return string(e)
}

func (e *StatusEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StatusEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StatusEnum", str)
	}
	return nil
}

func (e StatusEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type StrainType string

const (
	StrainTypeAll       StrainType = "ALL"
	StrainTypeRegular   StrainType = "REGULAR"
	StrainTypeGwdi      StrainType = "GWDI"
	StrainTypeBacterial StrainType = "BACTERIAL"
)

var AllStrainType = []StrainType{
	StrainTypeAll,
	StrainTypeRegular,
	StrainTypeGwdi,
	StrainTypeBacterial,
}

func (e StrainType) IsValid() bool {
	switch e {
	case StrainTypeAll, StrainTypeRegular, StrainTypeGwdi, StrainTypeBacterial:
		return true
	}
	return false
}

func (e StrainType) String() string {
	return string(e)
}

func (e *StrainType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StrainType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StrainType", str)
	}
	return nil
}

func (e StrainType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
