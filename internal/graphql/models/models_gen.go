// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/dictyBase/go-genproto/dictybaseapis/order"
	"github.com/dictyBase/go-genproto/dictybaseapis/publication"
	"github.com/dictyBase/go-genproto/dictybaseapis/user"
)

type BasePublication interface {
	IsBasePublication()
}

type Stock interface {
	IsStock()
}

type AssociatedSequences struct {
	GenbankGenomicFragment *NameWithLink   `json:"genbank_genomic_fragment"`
	GenbankMrna            *NameWithLink   `json:"genbank_mrna"`
	Ests                   []*NameWithLink `json:"ests"`
	MoreLink               string          `json:"more_link"`
}

type Citation struct {
	Authors  string `json:"authors"`
	Title    string `json:"title"`
	Journal  string `json:"journal"`
	PubmedID string `json:"pubmed_id"`
}

type CreateContentInput struct {
	Name      string `json:"name"`
	CreatedBy string `json:"created_by"`
	Content   string `json:"content"`
	Namespace string `json:"namespace"`
}

type CreateOrderInput struct {
	Courier          string     `json:"courier"`
	CourierAccount   string     `json:"courier_account"`
	Comments         *string    `json:"comments"`
	Payment          string     `json:"payment"`
	PurchaseOrderNum *string    `json:"purchase_order_num"`
	Status           StatusEnum `json:"status"`
	Consumer         string     `json:"consumer"`
	Payer            string     `json:"payer"`
	Purchaser        string     `json:"purchaser"`
	Items            []string   `json:"items"`
}

type CreatePermissionInput struct {
	Permission  string `json:"permission"`
	Description string `json:"description"`
	Resource    string `json:"resource"`
}

type CreatePlasmidInput struct {
	CreatedBy        string   `json:"created_by"`
	UpdatedBy        string   `json:"updated_by"`
	Summary          *string  `json:"summary"`
	EditableSummary  *string  `json:"editable_summary"`
	Depositor        *string  `json:"depositor"`
	Genes            []string `json:"genes"`
	Dbxrefs          []string `json:"dbxrefs"`
	Publications     []string `json:"publications"`
	Name             string   `json:"name"`
	ImageMap         *string  `json:"image_map"`
	Sequence         *string  `json:"sequence"`
	InStock          bool     `json:"in_stock"`
	Keywords         []string `json:"keywords"`
	GenbankAccession *string  `json:"genbank_accession"`
}

type CreateRoleInput struct {
	Role        string `json:"role"`
	Description string `json:"description"`
}

type CreateStrainInput struct {
	CreatedBy           string   `json:"created_by"`
	UpdatedBy           string   `json:"updated_by"`
	Summary             *string  `json:"summary"`
	EditableSummary     *string  `json:"editable_summary"`
	Depositor           *string  `json:"depositor"`
	Genes               []string `json:"genes"`
	Dbxrefs             []string `json:"dbxrefs"`
	Publications        []string `json:"publications"`
	SystematicName      string   `json:"systematic_name"`
	Label               string   `json:"label"`
	Species             string   `json:"species"`
	Plasmid             *string  `json:"plasmid"`
	Parent              *string  `json:"parent"`
	Names               []string `json:"names"`
	InStock             bool     `json:"in_stock"`
	Phenotypes          []string `json:"phenotypes"`
	GeneticModification *string  `json:"genetic_modification"`
	MutagenesisMethod   *string  `json:"mutagenesis_method"`
	Characteristics     []string `json:"characteristics"`
	Genotypes           []string `json:"genotypes"`
}

type CreateUserInput struct {
	FirstName     string  `json:"first_name"`
	LastName      string  `json:"last_name"`
	Email         string  `json:"email"`
	Organization  *string `json:"organization"`
	GroupName     *string `json:"group_name"`
	FirstAddress  *string `json:"first_address"`
	SecondAddress *string `json:"second_address"`
	City          *string `json:"city"`
	State         *string `json:"state"`
	Zipcode       *string `json:"zipcode"`
	Country       *string `json:"country"`
	Phone         *string `json:"phone"`
	IsActive      bool    `json:"is_active"`
}

type DeleteContent struct {
	Success bool `json:"success"`
}

type DeletePermission struct {
	Success bool `json:"success"`
}

type DeleteRole struct {
	Success bool `json:"success"`
}

type DeleteStock struct {
	Success bool `json:"success"`
}

type DeleteUser struct {
	Success bool `json:"success"`
}

type Download struct {
	Title string          `json:"title"`
	Items []*DownloadItem `json:"items"`
}

type DownloadItem struct {
	Title string `json:"title"`
	URL   string `json:"url"`
}

type Extension struct {
	ID       string `json:"id"`
	Db       string `json:"db"`
	Relation string `json:"relation"`
	Name     string `json:"name"`
}

type GOAnnotation struct {
	ID           string       `json:"id"`
	Type         string       `json:"type"`
	Date         string       `json:"date"`
	EvidenceCode string       `json:"evidence_code"`
	GoTerm       string       `json:"go_term"`
	Qualifier    string       `json:"qualifier"`
	Publication  string       `json:"publication"`
	With         []*With      `json:"with"`
	Extensions   []*Extension `json:"extensions"`
	AssignedBy   string       `json:"assigned_by"`
}

type Gene struct {
	ID                  string                `json:"id"`
	Name                string                `json:"name"`
	Goas                []*GOAnnotation       `json:"goas"`
	Strains             []*Strain             `json:"strains"`
	Orthologs           []*Orthologs          `json:"orthologs"`
	ProductInfo         []*ProductInformation `json:"product_info"`
	GeneralInfo         *GeneralInfo          `json:"general_info"`
	AssociatedSequences *AssociatedSequences  `json:"associated_sequences"`
	Links               *Links                `json:"links"`
	ProteinInformation  *ProteinInformation   `json:"protein_information"`
}

type GeneralInfo struct {
	NameDescription []string `json:"name_description"`
	AltGeneName     []string `json:"alt_gene_name"`
	GeneProduct     string   `json:"gene_product"`
	AltProteinNames []string `json:"alt_protein_names"`
	Description     string   `json:"description"`
}

type GenomicCoordinates struct {
	Exon        string `json:"exon"`
	LocalCoords string `json:"local_coords"`
	ChromCoords string `json:"chrom_coords"`
}

type Identity struct {
	ID         string    `json:"id"`
	Identifier string    `json:"identifier"`
	Provider   string    `json:"provider"`
	UserID     string    `json:"user_id"`
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
}

type Links struct {
	Expression   []*NameWithLink `json:"expression"`
	Colleagues   *NameWithLink   `json:"colleagues"`
	ExtResources []*NameWithLink `json:"ext_resources"`
}

type LoginInput struct {
	ClientID    string `json:"client_id"`
	State       string `json:"state"`
	Code        string `json:"code"`
	Scopes      string `json:"scopes"`
	Provider    string `json:"provider"`
	RedirectURL string `json:"redirect_url"`
}

type Logout struct {
	Success bool `json:"success"`
}

type NameWithLink struct {
	Name string `json:"name"`
	Link string `json:"link"`
}

type NumberOfPublicationsWithGene struct {
	NumPubs      int                    `json:"num_pubs"`
	Publications []*PublicationWithGene `json:"publications"`
}

type OrderListWithCursor struct {
	Orders         []*order.Order `json:"orders"`
	NextCursor     int            `json:"nextCursor"`
	PreviousCursor int            `json:"previousCursor"`
	Limit          *int           `json:"limit"`
	TotalCount     int            `json:"totalCount"`
}

type Organism struct {
	TaxonID        string      `json:"taxon_id"`
	ScientificName string      `json:"scientific_name"`
	Citations      []*Citation `json:"citations"`
	Downloads      []*Download `json:"downloads"`
}

type Orthologs struct {
	ID          *NameWithLink `json:"id"`
	Species     string        `json:"species"`
	Uniprotkb   *NameWithLink `json:"uniprotkb"`
	GeneProduct string        `json:"gene_product"`
	Source      []string      `json:"source"`
}

type Phenotype struct {
	Phenotype   string       `json:"phenotype"`
	Note        *string      `json:"note"`
	Assay       *string      `json:"assay"`
	Environment *string      `json:"environment"`
	Publication *Publication `json:"publication"`
}

type PlasmidListWithCursor struct {
	Plasmids       []*Plasmid `json:"plasmids"`
	NextCursor     int        `json:"nextCursor"`
	PreviousCursor int        `json:"previousCursor"`
	Limit          *int       `json:"limit"`
	TotalCount     int        `json:"totalCount"`
}

type ProductInformation struct {
	ProteinCodingGene      *NameWithLink         `json:"protein_coding_gene"`
	ProteinLength          string                `json:"protein_length"`
	ProteinMolecularWeight string                `json:"protein_molecular_weight"`
	MoreProteinData        string                `json:"more_protein_data"`
	GenomicCoords          []*GenomicCoordinates `json:"genomic_coords"`
}

type ProteinGeneralInfo struct {
	GeneProduct         string        `json:"gene_product"`
	DictybaseID         string        `json:"dictybase_id"`
	Description         string        `json:"description"`
	ProteinLength       string        `json:"protein_length"`
	MolecularWeight     string        `json:"molecular_weight"`
	AaComposition       *NameWithLink `json:"aa_composition"`
	SubcellularLocation string        `json:"subcellular_location"`
	ProteinExistence    string        `json:"protein_existence"`
	Note                string        `json:"note"`
}

type ProteinInformation struct {
	GeneralInfo     *ProteinGeneralInfo `json:"general_info"`
	ExternalLinks   []*NameWithLink     `json:"external_links"`
	ProteinSequence string              `json:"protein_sequence"`
}

type PublicationWithGene struct {
	RelatedGenes []*Gene               `json:"related_genes"`
	ID           string                `json:"id"`
	Doi          *string               `json:"doi"`
	Title        string                `json:"title"`
	Abstract     string                `json:"abstract"`
	Journal      string                `json:"journal"`
	PubDate      *time.Time            `json:"pub_date"`
	Volume       *string               `json:"volume"`
	Pages        *string               `json:"pages"`
	Issn         *string               `json:"issn"`
	PubType      string                `json:"pub_type"`
	Source       string                `json:"source"`
	Issue        *string               `json:"issue"`
	Status       *string               `json:"status"`
	Authors      []*publication.Author `json:"authors"`
}

func (PublicationWithGene) IsBasePublication() {}

type StrainListFilter struct {
	Label      *string    `json:"label"`
	Summary    *string    `json:"summary"`
	ID         *string    `json:"id"`
	InStock    *bool      `json:"in_stock"`
	StrainType StrainType `json:"strain_type"`
}

type StrainListWithCursor struct {
	Strains        []*Strain `json:"strains"`
	NextCursor     int       `json:"nextCursor"`
	PreviousCursor int       `json:"previousCursor"`
	Limit          *int      `json:"limit"`
	TotalCount     int       `json:"totalCount"`
}

type UpdateContentInput struct {
	ID        string `json:"id"`
	UpdatedBy string `json:"updated_by"`
	Content   string `json:"content"`
}

type UpdateOrderInput struct {
	Courier          *string     `json:"courier"`
	CourierAccount   *string     `json:"courier_account"`
	Comments         *string     `json:"comments"`
	Payment          *string     `json:"payment"`
	PurchaseOrderNum *string     `json:"purchase_order_num"`
	Status           *StatusEnum `json:"status"`
	Items            []string    `json:"items"`
}

type UpdatePermissionInput struct {
	Permission  string `json:"permission"`
	Description string `json:"description"`
	Resource    string `json:"resource"`
}

type UpdatePlasmidInput struct {
	UpdatedBy        string   `json:"updated_by"`
	Summary          *string  `json:"summary"`
	EditableSummary  *string  `json:"editable_summary"`
	Depositor        *string  `json:"depositor"`
	Genes            []string `json:"genes"`
	Dbxrefs          []string `json:"dbxrefs"`
	Publications     []string `json:"publications"`
	Name             *string  `json:"name"`
	ImageMap         *string  `json:"image_map"`
	Sequence         *string  `json:"sequence"`
	InStock          *bool    `json:"in_stock"`
	Keywords         []string `json:"keywords"`
	GenbankAccession *string  `json:"genbank_accession"`
}

type UpdateRoleInput struct {
	Role        string `json:"role"`
	Description string `json:"description"`
}

type UpdateStrainInput struct {
	UpdatedBy           string   `json:"updated_by"`
	Summary             *string  `json:"summary"`
	EditableSummary     *string  `json:"editable_summary"`
	Depositor           *string  `json:"depositor"`
	Genes               []string `json:"genes"`
	Dbxrefs             []string `json:"dbxrefs"`
	Publications        []string `json:"publications"`
	SystematicName      *string  `json:"systematic_name"`
	Label               *string  `json:"label"`
	Species             *string  `json:"species"`
	Plasmid             *string  `json:"plasmid"`
	Parent              *string  `json:"parent"`
	Names               []string `json:"names"`
	InStock             *bool    `json:"in_stock"`
	Phenotypes          []string `json:"phenotypes"`
	GeneticModification *string  `json:"genetic_modification"`
	MutagenesisMethod   *string  `json:"mutagenesis_method"`
	Characteristics     []string `json:"characteristics"`
	Genotypes           []string `json:"genotypes"`
}

type UpdateUserInput struct {
	FirstName     *string `json:"first_name"`
	LastName      *string `json:"last_name"`
	Organization  *string `json:"organization"`
	GroupName     *string `json:"group_name"`
	FirstAddress  *string `json:"first_address"`
	SecondAddress *string `json:"second_address"`
	City          *string `json:"city"`
	State         *string `json:"state"`
	Zipcode       *string `json:"zipcode"`
	Country       *string `json:"country"`
	Phone         *string `json:"phone"`
	IsActive      *bool   `json:"is_active"`
}

type UserList struct {
	Users      []*user.User `json:"users"`
	PageNum    *string      `json:"pageNum"`
	PageSize   *string      `json:"pageSize"`
	TotalCount int          `json:"totalCount"`
}

type With struct {
	ID   string `json:"id"`
	Db   string `json:"db"`
	Name string `json:"name"`
}

type StatusEnum string

const (
	StatusEnumInPreparation StatusEnum = "IN_PREPARATION"
	StatusEnumGrowing       StatusEnum = "GROWING"
	StatusEnumCancelled     StatusEnum = "CANCELLED"
	StatusEnumShipped       StatusEnum = "SHIPPED"
)

var AllStatusEnum = []StatusEnum{
	StatusEnumInPreparation,
	StatusEnumGrowing,
	StatusEnumCancelled,
	StatusEnumShipped,
}

func (e StatusEnum) IsValid() bool {
	switch e {
	case StatusEnumInPreparation, StatusEnumGrowing, StatusEnumCancelled, StatusEnumShipped:
		return true
	}
	return false
}

func (e StatusEnum) String() string {
	return string(e)
}

func (e *StatusEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StatusEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StatusEnum", str)
	}
	return nil
}

func (e StatusEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type StrainType string

const (
	StrainTypeAll       StrainType = "ALL"
	StrainTypeRegular   StrainType = "REGULAR"
	StrainTypeGwdi      StrainType = "GWDI"
	StrainTypeBacterial StrainType = "BACTERIAL"
)

var AllStrainType = []StrainType{
	StrainTypeAll,
	StrainTypeRegular,
	StrainTypeGwdi,
	StrainTypeBacterial,
}

func (e StrainType) IsValid() bool {
	switch e {
	case StrainTypeAll, StrainTypeRegular, StrainTypeGwdi, StrainTypeBacterial:
		return true
	}
	return false
}

func (e StrainType) String() string {
	return string(e)
}

func (e *StrainType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StrainType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StrainType", str)
	}
	return nil
}

func (e StrainType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
