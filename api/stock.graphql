type Query {
  stock(id: ID!): Stock
  listStocks(cursor: ID, limit: Int, filter: String): StockListWithCursor
}

type Mutation {
  createStrain(input: CreateStrainInput): Stock
  createPlasmid(input: CreatePlasmidInput): Stock
  updateStock(id: ID!, input: UpdateStockInput): Stock
  deleteStock(id: ID!): DeleteItem
}

scalar Timestamp

type Stock {
  id: ID!
  created_at: Timestamp!
  updated_at: Timestamp!
  created_by: String!
  updated_by: String!
  summary: String
  editable_summary: String
  depositor: String
  genes: [String]
  dbxrefs: [String]
  publications: [String]
  strain_properties: StrainProperties
  plasmid_properties: PlasmidProperties
}

type StrainProperties {
  systematic_name: String!
  descriptor: String!
  species: String!
  plasmid: String
  parents: [String]
  names: [String]
}

type PlasmidProperties {
  image_map: String
  sequence: String
}

type StockListWithCursor {
  stocks: [Stock!]!
  nextCursor: ID!
  previousCursor: ID!
  limit: Int
  totalCount: Int!
}

type DeleteItem {
  success: Boolean!
}

input CreateStrainInput {
  created_by: String!
  updated_by: String!
  summary: String
  editable_summary: String
  depositor: String
  genes: [String]
  dbxrefs: [String]
  publications: [String]
  strain_properties: StrainProperties!
}

input CreatePlasmidInput {
  created_by: String!
  updated_by: String!
  summary: String
  editable_summary: String
  depositor: String
  genes: [String]
  dbxrefs: [String]
  publications: [String]
  plasmid_properties: PlasmidProperties
}

input UpdateStockInput {
  updated_by: String!
  summary: String
  editable_summary: String
  depositor: String
  genes: [String]
  dbxrefs: [String]
  publications: [String]
  strain_properties: UpdateStrainProperties
  plasmid_properties: PlasmidProperties
}

type UpdateStrainProperties {
  systematic_name: String
  descriptor: String
  species: String
  plasmid: String
  parents: [String]
  names: [String]
}
